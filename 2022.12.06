# define F_Sonar 8
# define R_Sonar 10
# define L_Sonar 11

int IN1pin=1;
int IN2pin=3;
int ENA=5;

int IN3pin=4;
int IN4pin=7;
int ENB=6;

float F_distance = 0;
float R_distance = 0;
float L_distance = 0;




float F_Sonar_sensor() // 전방 초음파 센서 실수 값 표현
{
  float duration = 0.0; // 변수(duration) 선언 및 초기화
  float distance = 0.0; // 변수(distance) 선언 및 초기화
  pinMode(F_Sonar, OUTPUT); // 전방 초음파 센서 출력
  digitalWrite(F_Sonar, LOW); // 전방 초음파 센서 출력 꺼짐
  digitalWrite(F_Sonar, HIGH); // 전방 초음파 센서 출력 켜짐
  delay(10); // 0.01초간 멈춤
  digitalWrite(F_Sonar, LOW); // 전방 초음파 센서 출력 꺼짐
  pinMode(F_Sonar, INPUT); // 전방 초음파 센서 값 입력  
  duration = pulseIn(F_Sonar, HIGH); // 전방 초음파 센서의 전압이 HIGH시점에서 LOW시점까지의 시간  
  distance = (duration * 340.0)/2.0/1000.0; // 전방 초음파 센서의 거리 값  
  return distance; // 거리 값 반환
}

float  R_Sonar_sensor() // 오른쪽 초음파 센서 실수 값 표현
{
  float duration = 0.0; // 변수(duration) 선언 및 초기화
  float distance = 0.0; // 변수(distance) 선언 및 초기화
  pinMode(R_Sonar, OUTPUT); // 오른쪽 초음파 센서 출력
  digitalWrite(R_Sonar, LOW); // 오른쪽 초음파 센서 출력 꺼짐
  digitalWrite(R_Sonar, HIGH); // 오른쪽 초음파 센서 출력 켜짐
  delay(10); // 0.01초간 멈춤
  digitalWrite(R_Sonar, LOW); // 오른쪾 초음파 센서 출력 꺼짐  
  pinMode(R_Sonar, INPUT);  // 오른쪽 초음파 센서 값 입력
  duration = pulseIn(R_Sonar, HIGH); // 오른쪽 초음파 센서의 전압이 HIGH시점에서 LOW시점까지의 시간  
  distance = (duration * 340.0)/2.0/1000.0;  // 오른쪽 초음파 센서의 거리 값
  return distance;  // 거리 값 반환
}

float  L_Sonar_sensor() // 왼쪽 초음파 센서 실수 값 표현
{
  float duration = 0.0; // 변수(duration) 선언 및 초기화
  float distance = 0.0; // 변수(distance) 선언 및 초기화
  pinMode(L_Sonar, OUTPUT); // 왼쪽 초음파 센서 출력
  digitalWrite(L_Sonar, LOW); // 왼쪽 초음파 센서 출력 꺼짐
  digitalWrite(L_Sonar, HIGH); // 왼쪽 초음파 센서 출력 켜짐
  delay(10);  // 0.01초간 멈춤
  digitalWrite(L_Sonar, LOW); // 왼쪽 초음파 센서 출력 꺼짐
  pinMode(L_Sonar, INPUT); // 왼쪽 초음파 센서 값 입력
  duration = pulseIn(L_Sonar, HIGH); // 왼쪽 초음파 센서의 전압이 HIGH시점에서 LOW시점까지의 시간
  distance = (duration * 340.0)/2.0/1000.0; // 왼쪽 초음파 센서의 거리 값
  return distance; // 거리 값 반환
}

void setup(){
  pinMode(F_Sonar,OUTPUT);
   pinMode(R_Sonar,OUTPUT);
    pinMode(L_Sonar,OUTPUT);
    Serial.begin(115200);
}

void loop() {
F_distance = F_Sonar();
R_distance = R_Sonar();
L_distance = L_Sonar();
if(F_distance<= 250){                           //전방 센서가 측정 값이내 일 때 정지
go_stop();
delay(600);
if((R_distance<=250)&&(L_distance<=250)){        //양쪽센서가 동시에 측정 값이내 일 때 AND문 활용해 오른쪽으로 유턴
   go_right();
   delay (3600);
   go_stop();
  delay(600); 
}

else if(R_distance <=250){                        //오른쪽만 막힌 경우 
   go_left();
  delay (1800);
   go_stop();
  delay(600); 
}
 else if(L_distance <=250){                      //왼쪽도 막히면 우회전
   go_right();
    delay(1800);
    go_stop();
    delay(600);
    }
}
else{
   go_forward();
}
}
